<?php

namespace App\Models\Database;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use App\Utilities\Hash;
use App\Utilities\FunWithText;
use Exception;
use DB;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'token',
        'first_name',
        'last_name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'id',
        'password',
        'created_at',
        'updated_at',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'id'         => 'integer',
        'created_at' => 'timestamp',
        'updated_at' => 'timestamp',
    ];

    // substr(md5('User'), 0, 6)
    private $error_prefix = '8f9bfe';

    /**
     * Get the adoption applications owned by the user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function adoptionApplications()
    {
        return $this->hasMany(AdoptionApplication::class);
    }

    /**
     * @param string $first_name
     * @param string $last_name
     * @param string $email
     * @param string $password
     * @return mixed
     * @throws Exception
     */
    public function add(string $first_name, string $last_name, string $email, $password = '')
    {
        $first_name = FunWithText::safeString($first_name);
        $last_name  = FunWithText::safeString($last_name);
        $email      = FunWithText::safeEmail($email);
        $password   = trim($password);
        if ($first_name === '') {
            throw new Exception("({$this->error_prefix}) First name required", 400);
        }
        if ($last_name === '') {
            throw new Exception("({$this->error_prefix}) Last name required", 400);
        }
        if ($email === '') {
            throw new Exception("({$this->error_prefix}) Email required", 400);
        }
        if ($password === '') {
            $password = (string) rand();
        }

        self::create([
            'token'      => DB::raw('UUID()'),
            'first_name' => $first_name,
            'last_name'  => $last_name,
            'email'      => $email,
            'password'   => Hash::sha512($email, $password),
        ]);

        // since the usable password is a hash of token + password,
        // and since the token is generated by the database server
        // the value is unknown until after insert
        // so an immediate update is needed to reset the password based on the token.
        return (new User())
            ->findByEmail($email)
            ->updatePassword($password);
    }

    /**
     * @param string $password
     * @return $this
     */
    public function updatePassword(string $password)
    {
        $password = trim($password);
        if ($password === '') {
            return $this;
        }

        $this->password = Hash::sha512($this->token, $password);
        $this->save();
        return $this;
    }

    /**
     * @param string $token
     * @return mixed
     */
    public function findByToken(string $token)
    {
        return $this->findByEmailOrToken($token, 'token');
    }

    /**
     * @param string $email
     * @return mixed
     */
    public function findByEmail(string $email)
    {
        return $this->findByEmailOrToken($email, 'email');
    }

    /**
     * @param string $value
     * @param string $field_name
     * @return mixed
     */
    private function findByEmailOrToken(string $value, string $field_name)
    {
        return self::firstWhere($field_name, $value);
    }

    /**
     * @param string $token
     * @param string $password
     * @return mixed
     */
    public function authenticateByToken(string $token, string $password)
    {
        return $this->authenticateByEmailOrToken($token, $password, 'token');
    }

    /**
     * @param string $email
     * @param string $password
     * @return mixed
     */
    public function authenticateByEmail(string $email, string $password)
    {
        return $this->authenticateByEmailOrToken($email, $password, 'email');
    }

    /**
     * @param string $value
     * @param string $password
     * @param string $field_name
     * @return mixed
     */
    private function authenticateByEmailOrToken(string $value, string $password, string $field_name)
    {
        $password = Hash::sha512($value, $password);
        return self::where($field_name, $value)
            ->where('password', $password)
            ->first();
    }

    /**
     * @param string $application_type
     * @return bool
     */
    public function isAdoptionApplicationAdministrator($application_type)
    {
        $application_types = AdoptionApplication::applicationTypes();
        if (!in_array($application_type, $application_types)) {
            return false;
        }

        $admin_contact_emails = array_map(
            function($contact_key) {
                return config("bas.contacts.{$contact_key}.email");
            }, config("bas.contacts.application.administrators.{$application_type}")
        );

        if (!in_array($this->email, $admin_contact_emails)) {
            return false;
        }

        return true;
    }
}
